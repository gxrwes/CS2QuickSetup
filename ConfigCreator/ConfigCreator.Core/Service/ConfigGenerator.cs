using System;
using System.Collections.Generic;
using System.Text;
using ConfigCreator.Core.Models;
using ConfigCreator.Core; // For the Version class
using Figgle; // Make sure Figgle is installed from NuGet

namespace ConfigCreator.Core.Service
{
    public class ConfigGenerator
    {
        public const string CommentChar = "//";
        /// <summary>
        /// Generates a complete CS2 autoexec configuration file as a string.
        /// Only the top welcome message is rendered as ASCII art (with each line commented out)
        /// to prevent breaking the .cfg file. The rest of the configuration is output normally.
        /// At the end, a semicolon is appended to every non-empty line that does not start with a comment.
        /// </summary>
        /// <param name="config">The dynamic configuration data containing key bindings and commands.</param>
        /// <returns>A string representing the configuration file.</returns>
        public string GenerateConfig(GeneratedConfig config)
        {
            var sb = new StringBuilder();

            // --- Top Welcome Message: Generate ASCII art and comment each line without altering spacing ---
            string asciiArt = FiggleFonts.Standard.Render("CS2 Autoexec");
            // Replace each newline with a newline prefixed by the comment character and a space.
            string commentedArt = CommentChar + " " + asciiArt.Replace("\n", "\n" + CommentChar + " ");
            sb.AppendLine(commentedArt);

            // Add a fallback plain text header (also commented)
            sb.AppendLine(CommentChar + " CS2 Autoexec");
            sb.AppendLine();

            // --- Version and Basic Initialization (as echo commands) ---
            var ver = new Version();
            sb.AppendLine($"echo \"Generated by {ver.Author} v{ver.V}\"");
            sb.AppendLine($"echo \"Generated on {ver.GenerationDate}\"");
            sb.AppendLine("con_enable \"1\"");
            sb.AppendLine("showconsole");
            sb.AppendLine("echo \"Loading Autoexec Config...\"");
            sb.AppendLine();

            // --- Static Sections as Commands ---

            // Graphics Settings Header (plain text comment)
            sb.AppendLine($"{CommentChar} Graphics Settings");
            foreach (var command in GetDefaultGraphicsCommands())
            {
                sb.AppendLine(command.GetReplacedCommand());
            }
            sb.AppendLine();

            // Sound Settings Header (plain text comment)
            sb.AppendLine($"{CommentChar} Sound Settings");
            foreach (var command in GetDefaultSoundCommands())
            {
                sb.AppendLine(command.GetReplacedCommand());
            }
            sb.AppendLine();

            // --- Dynamic Section: Control Binds (Key Bindings) ---
            sb.AppendLine("echo \"[DEBUG] Inserting dynamic key bindings\"");
            sb.AppendLine($"{CommentChar} Control Binds");
            if (config.KeyBindings != null && config.KeyBindings.Count > 0)
            {
                foreach (var binding in config.KeyBindings)
                {
                    sb.AppendLine($"bind \"{binding.Key}\" \"{binding.Value}\"");
                }
            }
            else
            {
                sb.AppendLine($"{CommentChar} No key bindings configured");
            }
            sb.AppendLine();

            // --- Dynamic Section: Quick Commands ---
            sb.AppendLine("echo \"[DEBUG] Inserting dynamic commands\"");
            sb.AppendLine($"{CommentChar} Quick Commands");
            if (config.Commands != null && config.Commands.Count > 0)
            {
                foreach (var command in config.Commands)
                {
                    sb.AppendLine(command.GetReplacedCommand());
                }
            }
            else
            {
                sb.AppendLine($"{CommentChar} No commands configured");
            }
            sb.AppendLine();

            // --- Footer ---
            sb.AppendLine("echo \"End of cfg\"");

            // --- Append ";" to every line that is not empty or starting with the comment ---
            string configText = sb.ToString();
            var lines = configText.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None);
            var finalSb = new StringBuilder();
            foreach (var line in lines)
            {
                if (!string.IsNullOrWhiteSpace(line) && !line.TrimStart().StartsWith(CommentChar))
                {
                    finalSb.AppendLine(line + ";");
                }
                else
                {
                    finalSb.AppendLine(line);
                }
            }
            return finalSb.ToString();
        }

        /// <summary>
        /// Returns a list of default graphics settings as Command objects.
        /// </summary>
        private IEnumerable<Command> GetDefaultGraphicsCommands()
        {
            return new List<Command>
            {
                new Command { Name = "Graphics: Fullscreen", CommandBase = "mat_fullscreen \"{0}\"", Parameters = new List<string> { "1" } },
                new Command { Name = "Graphics: Antialias",  CommandBase = "mat_antialias \"{0}\"",  Parameters = new List<string> { "2" } },
                new Command { Name = "Graphics: VSync",      CommandBase = "mat_vsync \"{0}\"",      Parameters = new List<string> { "0" } }
            };
        }

        /// <summary>
        /// Returns a list of default sound settings as Command objects.
        /// </summary>
        private IEnumerable<Command> GetDefaultSoundCommands()
        {
            return new List<Command>
            {
                new Command { Name = "Sound: Volume",           CommandBase = "volume \"{0}\"",               Parameters = new List<string> { "0.5" } },
                new Command { Name = "Sound: Music Volume",     CommandBase = "snd_musicvolume \"{0}\"",        Parameters = new List<string> { "0.0" } },
                new Command { Name = "Sound: Headshot Boost",   CommandBase = "snd_headshot_volume \"{0}\"",    Parameters = new List<string> { "1.2" } }
            };
        }
    }
}
